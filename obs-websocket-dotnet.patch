diff --git a/TestClient/AdvancedWindow.cs b/TestClient/AdvancedWindow.cs
index 65dd7f9..1bc15a4 100644
--- a/TestClient/AdvancedWindow.cs
+++ b/TestClient/AdvancedWindow.cs
@@ -60,7 +60,10 @@ namespace TestClient
             obs.SceneItemVisibilityChanged += OBS_SceneItemVisibilityChanged;
             obs.SourceRenamed += OBS_SourceRenamed;
             obs.SourceVolumeChanged += Obs_SourceVolumeChanged;
+
+            obs.ReplayBufferStateChanged += (e, e2) => LogMessage($"[ReplayBufferStateChanged] State: {e2}");
         }
+
         private void Obs_SourceVolumeChanged(OBSWebsocket sender, SourceVolume volume)
         {
             LogMessage($"[SourceVolumeChanged] Source: {volume.SourceName} Volume: {volume.Volume} VolumeDB: {volume.VolumeDb}");
diff --git a/obs-websocket-dotnet/Events.cs b/obs-websocket-dotnet/Events.cs
index 3dfb1b5..8adbb60 100644
--- a/obs-websocket-dotnet/Events.cs
+++ b/obs-websocket-dotnet/Events.cs
@@ -100,6 +100,13 @@ namespace OBSWebsocketDotNet
     /// <param name="type">New output state</param>
     public delegate void OutputStateCallback(OBSWebsocket sender, OutputState type);
 
+    /// <summary>
+    /// Called by <see cref="OBSWebsocket.ReplayBufferSaved"/>
+    /// </summary>
+    /// <param name="sender"><see cref="OBSWebsocket"/> instance</param>
+    /// <param name="replayFilename">Path to the saved file</param>
+    public delegate void ReplaySavedCallback(OBSWebsocket sender, string replayFilename);
+
     /// <summary>
     /// Called by <see cref="OBSWebsocket.StreamStatus"/>
     /// </summary>
diff --git a/obs-websocket-dotnet/OBSWebsocket.cs b/obs-websocket-dotnet/OBSWebsocket.cs
index 6cf8c8a..4763642 100644
--- a/obs-websocket-dotnet/OBSWebsocket.cs
+++ b/obs-websocket-dotnet/OBSWebsocket.cs
@@ -48,7 +48,7 @@ namespace OBSWebsocketDotNet
         /// <summary>
         /// Triggered when the lock status of a scene item changes
         /// </summary>
-        public event SceneItemLockChangedCallback SceneItemLockChanged;      
+        public event SceneItemLockChangedCallback SceneItemLockChanged;
 
         /// <summary>
         /// Triggered when switching to another scene collection
@@ -125,6 +125,11 @@ namespace OBSWebsocketDotNet
         /// </summary>
         public event OutputStateCallback ReplayBufferStateChanged;
 
+        /// <summary>
+        /// Triggered when replay replay buffer saved
+        /// </summary>
+        public event ReplaySavedCallback ReplayBufferSaved;
+
         /// <summary>
         /// Triggered every 2 seconds while streaming is active
         /// </summary>
@@ -319,7 +324,7 @@ namespace OBSWebsocketDotNet
 
         #region Private Members
         private const string WEBSOCKET_URL_PREFIX = "ws://";
-        private TimeSpan wsTimeout = TimeSpan.FromSeconds(10);
+        private TimeSpan wsTimeout = TimeSpan.FromSeconds(3);
 
         // Random should never be created inside a function
         private static readonly Random random = new Random();
@@ -410,7 +415,7 @@ namespace OBSWebsocketDotNet
                 catch { }
                 WSConnection = null;
             }
-            
+
             var unusedHandlers = responseHandlers.ToArray();
             responseHandlers.Clear();
             foreach (var cb in unusedHandlers)
@@ -495,9 +500,8 @@ namespace OBSWebsocketDotNet
             // Send the message and wait for a response
             // (received and notified by the websocket response handler)
             WSConnection.Send(body.ToString());
-            tcs.Task.Wait();
 
-            if (tcs.Task.IsCanceled)
+            if (!tcs.Task.Wait(wsTimeout) || tcs.Task.IsCanceled)
                 throw new ErrorResponseException("Request canceled");
 
             // Throw an exception if the server returned an error.
@@ -703,6 +707,13 @@ namespace OBSWebsocketDotNet
                     ReplayBufferStateChanged?.Invoke(this, OutputState.Stopped);
                     break;
 
+                case "ReplaySaved":
+                    if (body.ContainsKey("replayFilename"))
+                        ReplayBufferSaved?.Invoke(this, (string)body["replayFilename"]);
+                    else
+                        ReplayBufferSaved?.Invoke(this, "");
+                    break;
+
                 case "Exiting":
                     OBSExit?.Invoke(this, EventArgs.Empty);
                     break;
@@ -800,10 +811,10 @@ namespace OBSWebsocketDotNet
                     VirtualCameraStopped?.Invoke(this, EventArgs.Empty);
                     break;
                 default:
-                        var message = $"Unsupported Event: {eventType}\n{body}";
-                        Console.WriteLine(message);
-                        Debug.WriteLine(message);
-                        break;
+                    var message = $"Unsupported Event: {eventType}\n{body}";
+                    Console.WriteLine(message);
+                    Debug.WriteLine(message);
+                    break;
             }
         }
 
